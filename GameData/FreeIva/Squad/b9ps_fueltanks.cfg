// CryoTanks provides fuelswitch modules to all LF and LFOX tanks in a FOR[zzz_CryoTanks] pass, so use zzz_FreeIva to make sure we go after

// Portions of these patches are copied from CryoTanks and used under MIT license:
// Copyright (c) 2019 Chris Adderley
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// the tank types that come with b9ps are *not* in line with stock values for some reason - these are copied from CryoTanks
B9_TANK_TYPE:NEEDS[!CryoTanks]
{
	name = LFOX
	tankMass = 0.000625
	tankCost = 0.00
	RESOURCE
	{
		name = LiquidFuel
		unitsPerVolume = 0.45
	}
	RESOURCE
	{
		name = Oxidizer
		unitsPerVolume = 0.55
	}
}
B9_TANK_TYPE:NEEDS[!CryoTanks]
{
	name = LF
	tankMass = 0.000625
	tankCost = 0.3
	RESOURCE
	{
		name = LiquidFuel
		unitsPerVolume = 1
	}
}

// step 1: mark tanks that should get the auto-passthrough treatment
@PART[adapterSize3-Mk3]:HAS[~FreeIva_AutoPassThrough]:FOR[FreeIva]
{
	FreeIva_AutoPassThrough = true
	FreeIva_AutoPassThrough_VolumeScalar = -0.1
}
@PART[adapterMk3-Size2|adapterMk3-Size2Slant|adapterSize2-Mk2]:HAS[~FreeIva_AutoPassThrough]:FOR[FreeIva]
{
	FreeIva_AutoPassThrough = true
	FreeIva_AutoPassThrough_VolumeScalar = -0.25
}
@PART[adapterMk3-Mk2|mk2SpacePlaneAdapter|mk2_1m_AdapterLong|adapterSize2-Size1]:HAS[~FreeIva_AutoPassThrough]:FOR[FreeIva]
{
	FreeIva_AutoPassThrough = true
	FreeIva_AutoPassThrough_VolumeScalar = -0.5 // special case - this one is slanted so more volume is expected to be lost
}

// step 2: Find the b9ps moduleID that provides fuel switching
@PART:HAS[#FreeIva_AutoPassThrough[true]&@MODULE[ModuleB9PartSwitch]:HAS[@SUBTYPE:HAS[#tankType]]]:FOR[zzz_FreeIva]
{
	FreeIva_AutoPassThrough_FuelSwitchID = #$MODULE[ModuleB9PartSwitch]:HAS[@SUBTYPE:HAS[#tankType]]/moduleID$
	FreeIva_AutoPassThrough_FuelVolume = #$MODULE[ModuleB9PartSwitch]:HAS[@SUBTYPE:HAS[#tankType]]/baseVolume$
}

// step 3: if there is no fuel switch moduleID, add one
@PART:HAS[#FreeIva_AutoPassThrough[true]&~FreeIva_AutoPassThrough_FuelSwitchID]:FOR[zzz_FreeIva]
{
	FreeIva_AutoPassThrough_FuelSwitchID = FreeIva_fuelSwitch
	FreeIva_AutoPassThrough_TankTypes = true

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = FreeIva_fuelSwitch
	}
}

// step 3.5: calculate the volume and fuel types for the tanks we added
// LFO
@PART:HAS[#FreeIva_AutoPassThrough_TankTypes[true]&@RESOURCE[LiquidFuel]&@RESOURCE[Oxidizer]]:FOR[zzz_FreeIva]
{
// BEGIN copied from CryoTanks -----
	//Calculate total capacity by units of default resources
	%LF = #$RESOURCE[LiquidFuel]/maxAmount$
	%OX = #$RESOURCE[Oxidizer]/maxAmount$

	%totalCap = #$RESOURCE[LiquidFuel]/maxAmount$
	@totalCap += #$RESOURCE[Oxidizer]/maxAmount$

	//Mass offset is used to ensure correct dry mass of tanks
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1

	//Take default resource quantities and multiply by resource units costs to calculate total cost of original resources
	@LF *= #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$
	@OX *= #$@RESOURCE_DEFINITION[Oxidizer]/unitCost$

	//Sum the total costs of both resources and deduct to avoid double counting once resources are added via switcher
	%costOffset = #$LF$
	@costOffset += #$OX$
	@costOffset *= -1

	// NOTE: we don't remove the original resources here so that the preview window shows the correct mass and cost
	// since we're not actually providing any fuel switching, this is fine.

// END copied from CryoTanks -----

	FreeIva_AutoPassThrough_FuelVolume = #$totalCap$

	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[FreeIva_fuelSwitch]]
	{
		baseVolume = #$../totalCap$
		SUBTYPE
		{
			name = LFOX
			tankType = LFOX
			addedMass = #$../../massOffset$
			addedCost = #$../../costOffset$
		}
	}
}
// LF-only
@PART:HAS[#FreeIva_AutoPassThrough_TankTypes[true]&@RESOURCE[LiquidFuel]&!RESOURCE[Oxidizer]]:FOR[zzz_FreeIva]
{
// BEGIN copied from CryoTanks -----
	//Calculate total capacity by units of default resources
	%LF = #$RESOURCE[LiquidFuel]/maxAmount$

	%totalCap = #$RESOURCE[LiquidFuel]/maxAmount$

	//Mass offset is used to ensure correct dry mass of tanks
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1

	//Take default resource quantities and multiply by resource units costs to calculate total cost of original resources
	@LF *= #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$

	//Sum the total costs of both resources and deduct to avoid double counting once resources are added via switcher
	%costOffset = #$LF$
	@costOffset *= -1

	// NOTE: we don't remove the original resources here so that the preview window shows the correct mass and cost
	// since we're not actually providing any fuel switching, this is fine.

// END copied from CryoTanks -----

	FreeIva_AutoPassThrough_FuelVolume = #$totalCap$

	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[FreeIva_fuelSwitch]]
	{
		baseVolume = #$../totalCap$
		SUBTYPE
		{
			name = LF
			tankType = LF
			addedMass = #$../../massOffset$
			addedCost = #$../../costOffset$
		}
	}
}

// step 4: add the b9ps module for freeiva
@PART:HAS[#FreeIva_AutoPassThrough[true]]:FOR[zzz_FreeIva]
{
	MODULE
	{
		name = ModuleFreeIva
	}

	MODULE
	{
		name = ModuleB9PartSwitch
		title = FreeIva

		moduleID = FreeIvaSwitch
		parentID = #$../FreeIva_AutoPassThrough_FuelSwitchID$

		SUBTYPE
		{
			name = Blocked
		}

		SUBTYPE
		{
			name = Passable

			// multiply the baseVolume and volumeScalar to see how much tank volume we remove (this should be *negative* because the volumeScalar is negative)
			%volumeAddedToParent = #$../../FreeIva_AutoPassThrough_FuelVolume$
			@volumeAddedToParent *= #$../../FreeIva_AutoPassThrough_VolumeScalar$

			// keep the dry mass the same as the tank
			%addedMass = #$volumeAddedToParent$
			@addedMass *= -0.000625 // dry mass per unit of LF/Ox which has a ratio of 1 unit per volume unit

			%addedCost = #$volumeAddedToParent$
			@addedCost *= -0.25 // mostly arbitrary

			MODULE
			{
				IDENTIFIER
				{
					name = ModuleFreeIva
				}
				DATA
				{
					passThroughNodeA = top
					passThroughNodeB = bottom
				}
			}
		}
	}
}